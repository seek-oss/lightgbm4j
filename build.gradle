plugins {
    id 'com.adtran.scala-multiversion-plugin' version '2.0.6'
    id 'com.github.maiflai.scalatest' version '0.30'
}

apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.github.seek-oss'
version = "${lightGbmVersion}-${lightGbm4JSubVersion}"

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile(
        "org.scala-lang:scala-library:%scala-version%",
        "com.typesafe.scala-logging:scala-logging_%%:3.9.4",
        'commons-io:commons-io:2.17.0',
        'commons-lang:commons-lang:2.6',
        "com.microsoft.ml.lightgbm:lightgbmlib:${lightGbmVersion}${lightGbmJavaSubVersion}"
    )

    testCompile(
        'junit:junit:4.13.2',
        "org.scalatest:scalatest_%%:3.0.5"
    )

    testRuntime(
        'org.slf4j:slf4j-simple:2.0.16',
        'org.pegdown:pegdown:1.6.0'
    )
}

task javadocJar(type: Jar) {
    from javadoc
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allScala
    classifier 'sources'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: nexusSeekOssUsername, password: project.nexusSeekOssPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.nexusSeekOssUsername, password: project.nexusSeekOssPassword)
            }

            pom.project {
                name = 'LightGBM4J'
                packaging 'jar'
                description = 'A JVM interface for LightGBM, written in Scala, for inference in production.'
                url = 'https://github.com/seek-oss/lightgbm4j'

                scm {
                    connection = 'scm:git:https://github.com/seek-oss/lightgbm4j.git'
                    developerConnection = 'scm:git:https://github.com/seek-oss/lightgbm4j.git'
                    url = 'https://github.com/seek-oss/lightgbm4j'
                }

                developers {
                    developer {
                        name 'Oliver Hutchison'
                        email 'ohutchison@seek.com.au'
                        organization 'SEEK Limited'
                    }
                    developer {
                        name 'Oliver Mannion'
                    }
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/seek-oss/lightgbm4j/blob/master/LICENSE'
                    }
                }
            }
        }
    }
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-Xfatal-warnings",
        "-Ywarn-unused-import",
        "-Ywarn-dead-code",
        "-Yno-adapted-args",
        "-Ypartial-unification",
        "-deprecation",
        "-unchecked",
        "-feature",
        "-Xlint",
        "-Xfuture",
        "-language:postfixOps",
        "-language:implicitConversions",
        "-language:higherKinds"
    ]
}

tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-Xss16m']
    }
}

task checkVersion {
    doLast {
        if (!version.matches('[0-9]+\\.[0-9]+\\.[0-9]+(-SNAPSHOT)?'))
            throw new GradleException("Invalid version '$version'")
    }
}

build.mustRunAfter(checkVersion)
