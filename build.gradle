
plugins {
    id 'com.adtran.scala-multiversion-plugin' version '1.0.35'
    id 'com.github.maiflai.scalatest' version '0.25'
}

apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group = 'au.com.seek'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile (
        "org.scala-lang:scala-library:%scala-version%",
        "com.typesafe.scala-logging:scala-logging_%%:3.9.0",
        'commons-io:commons-io:2.5',
        'commons-lang:commons-lang:2.6',
        'com.microsoft.ml.lightgbm:lightgbmlib:2.2.200'
    )

    testCompile(
        'junit:junit:4.12',
        "org.scalatest:scalatest_%%:3.0.5"
    )

    testRuntime(
        'org.slf4j:slf4j-simple:1.7.25',
        'org.pegdown:pegdown:1.6.0'
    )
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allScala
    classifier 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'lightgbmlib'
            from components.java
            artifact sourcesJar
        }
    }
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-Xfatal-warnings",
        "-Ywarn-unused-import",
        "-Ywarn-dead-code",
        "-Yno-adapted-args",
        "-Ypartial-unification",
        "-deprecation",
        "-unchecked",
        "-feature",
        "-Xlint",
        "-Xfuture",
        "-language:postfixOps",
        "-language:implicitConversions",
        "-language:higherKinds"
    ]
}

tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-Xss16m']
    }
}

task checkVersion {
    doLast {
        if (!version.matches('[0-9]+\\.[0-9]+\\.[0-9]+(-SNAPSHOT)?'))
            throw new GradleException("Invalid version '$version'")
    }
}

publish.dependsOn(checkVersion, build)
build.mustRunAfter(checkVersion)
